
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Fri May 28 04:02:15 CEST 2021
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.TokenValue;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import ast.*;
import ast.Instrucciones.*;
import ast.Expresiones.*;
import ast.Tipos.*;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Fri May 28 04:02:15 CEST 2021
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\202\000\002\002\006\000\002\002\004\000\002\002" +
    "\004\000\002\004\003\000\002\005\005\000\002\005\003" +
    "\000\002\006\005\000\002\006\003\000\002\007\005\000" +
    "\002\007\005\000\002\007\003\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\003\000\002\011\005\000\002\011\005\000\002\011\003" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\003\000\002\013\004\000\002\013\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\005" +
    "\000\002\014\005\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\016\005\000\002\016\005\000\002\017\006" +
    "\000\002\017\006\000\002\020\004\000\002\021\004\000" +
    "\002\022\006\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\025\007\000\002" +
    "\025\011\000\002\030\007\000\002\030\012\000\002\030" +
    "\013\000\002\026\011\000\002\027\011\000\002\031\010" +
    "\000\002\031\012\000\002\032\017\000\002\032\014\000" +
    "\002\033\005\000\002\034\006\000\002\034\006\000\002" +
    "\035\011\000\002\035\015\000\002\036\011\000\002\037" +
    "\007\000\002\040\005\000\002\003\003\000\002\046\005" +
    "\000\002\046\003\000\002\046\002\000\002\047\005\000" +
    "\002\047\003\000\002\047\002\000\002\050\004\000\002" +
    "\050\004\000\002\050\002\000\002\051\005\000\002\051" +
    "\003\000\002\051\002\000\002\044\004\000\002\044\002" +
    "\000\002\045\004\000\002\045\002\000\002\041\003\000" +
    "\002\041\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\043\005\000\002\002\003\000\002\003\003" +
    "\000\002\041\003\000\002\025\005\000\002\025\007\000" +
    "\002\025\011\000\002\030\012\000\002\030\011\000\002" +
    "\026\011\000\002\031\006\000\002\031\010\000\002\031" +
    "\012\000\002\032\005\000\002\032\007\000\002\033\004" +
    "\000\002\034\006\000\002\035\005\000\002\035\006\000" +
    "\002\036\005\000\002\036\006\000\002\020\004\000\002" +
    "\021\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\371\000\006\003\005\004\004\001\002\000\012\002" +
    "\uffa1\005\uffa1\012\uffa1\013\uffa1\001\002\000\004\002\uff95" +
    "\001\002\000\004\002\007\001\002\000\004\002\000\001" +
    "\002\000\012\002\uffff\005\022\012\014\013\011\001\002" +
    "\000\010\003\234\014\161\027\235\001\002\000\012\002" +
    "\uffcd\005\uffcd\012\uffcd\013\uffcd\001\002\000\012\002\uffa2" +
    "\005\uffa2\012\uffa2\013\uffa2\001\002\000\006\003\320\014" +
    "\161\001\002\000\012\002\uffcf\005\uffcf\012\uffcf\013\uffcf" +
    "\001\002\000\012\002\uffce\005\uffce\012\uffce\013\uffce\001" +
    "\002\000\012\002\uffd0\005\uffd0\012\uffd0\013\uffd0\001\002" +
    "\000\012\002\uffcb\005\uffcb\012\uffcb\013\uffcb\001\002\000" +
    "\012\002\uffcc\005\uffcc\012\uffcc\013\uffcc\001\002\000\024" +
    "\002\uff9f\003\uff9f\010\uff9f\013\uff9f\014\uff9f\026\uff9f\027" +
    "\uff9f\043\uff9f\050\uff9f\001\002\000\024\002\001\003\044" +
    "\010\051\013\024\014\034\026\025\027\037\043\027\050" +
    "\043\001\002\000\010\003\234\014\161\027\235\001\002" +
    "\000\006\003\232\014\231\001\002\000\004\011\uffd8\001" +
    "\002\000\006\003\213\036\214\001\002\000\030\002\uffa0" +
    "\003\uffa0\010\uffa0\013\uffa0\014\uffa0\026\uffa0\027\uffa0\042" +
    "\uffa0\043\uffa0\046\uffa0\050\uffa0\001\002\000\030\002\uffc3" +
    "\003\uffc3\010\uffc3\013\uffc3\014\uffc3\026\uffc3\027\uffc3\042" +
    "\uffc3\043\uffc3\046\uffc3\050\uffc3\001\002\000\006\011\uffda" +
    "\046\167\001\002\000\030\002\uffc5\003\uffc5\010\uffc5\013" +
    "\uffc5\014\uffc5\026\uffc5\027\uffc5\042\uffc5\043\uffc5\046\uffc5" +
    "\050\uffc5\001\002\000\012\011\uffaf\036\uffaf\040\156\046" +
    "\160\001\002\000\030\002\uffc4\003\uffc4\010\uffc4\013\uffc4" +
    "\014\uffc4\026\uffc4\027\uffc4\042\uffc4\043\uffc4\046\uffc4\050" +
    "\uffc4\001\002\000\030\002\uffc7\003\uffc7\010\uffc7\013\uffc7" +
    "\014\uffc7\026\uffc7\027\uffc7\042\uffc7\043\uffc7\046\uffc7\050" +
    "\uffc7\001\002\000\006\003\212\014\211\001\002\000\004" +
    "\011\uffd9\001\002\000\030\002\uffc9\003\uffc9\010\uffc9\013" +
    "\uffc9\014\uffc9\026\uffc9\027\uffc9\042\uffc9\043\uffc9\046\uffc9" +
    "\050\uffc9\001\002\000\030\002\uffc8\003\uffc8\010\uffc8\013" +
    "\uffc8\014\uffc8\026\uffc8\027\uffc8\042\uffc8\043\uffc8\046\uffc8" +
    "\050\uffc8\001\002\000\030\014\062\015\104\016\103\017" +
    "\061\020\074\021\064\022\057\026\025\027\037\036\102" +
    "\040\063\001\002\000\056\003\uff94\011\uff94\012\uff94\013" +
    "\uff94\023\uff94\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94" +
    "\031\uff94\032\uff94\033\uff94\034\uff94\035\uff94\036\uff94\037" +
    "\uff94\040\uff94\041\uff94\045\uff94\046\uff94\047\uff94\001\002" +
    "\000\006\011\176\036\177\001\002\000\004\011\173\001" +
    "\002\000\030\002\uffc6\003\uffc6\010\uffc6\013\uffc6\014\uffc6" +
    "\026\uffc6\027\uffc6\042\uffc6\043\uffc6\046\uffc6\050\uffc6\001" +
    "\002\000\006\011\uffdb\040\141\001\002\000\006\003\053" +
    "\036\054\001\002\000\030\002\uffca\003\uffca\010\uffca\013" +
    "\uffca\014\uffca\026\uffca\027\uffca\042\uffca\043\uffca\046\uffca" +
    "\050\uffca\001\002\000\004\046\172\001\002\000\032\003" +
    "\076\014\062\015\104\016\103\017\061\020\074\021\064" +
    "\022\057\026\025\027\037\036\102\040\063\001\002\000" +
    "\042\012\uffdc\013\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc" +
    "\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035" +
    "\uffdc\037\uffdc\041\uffdc\045\uffdc\001\002\000\042\012\uffdd" +
    "\013\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\037\uffdd" +
    "\041\uffdd\045\uffdd\001\002\000\030\014\062\015\104\016" +
    "\103\017\061\020\074\021\064\022\057\026\025\027\037" +
    "\036\102\040\063\001\002\000\044\012\uffdf\013\uffdf\023" +
    "\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\032\uffdf\033\uffdf\034\uffdf\035\uffdf\037\uffdf\041\uffdf\045" +
    "\uffdf\046\167\001\002\000\042\012\uffe6\013\uffe6\023\uffe6" +
    "\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032" +
    "\uffe6\033\uffe6\034\uffe6\035\uffe6\037\uffe6\041\uffe6\045\uffe6" +
    "\001\002\000\050\012\uffe3\013\uffe3\023\uffe3\024\uffe3\025" +
    "\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3" +
    "\034\uffe3\035\uffe3\036\157\037\uffe3\040\156\041\uffe3\045" +
    "\uffe3\046\160\001\002\000\034\014\062\015\104\016\103" +
    "\017\061\020\074\021\064\022\057\026\025\027\037\036" +
    "\102\040\063\041\uffac\045\uffac\001\002\000\042\012\uffe4" +
    "\013\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030" +
    "\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\037\uffe4" +
    "\041\uffe4\045\uffe4\001\002\000\042\012\uffe9\013\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9" +
    "\032\uffe9\033\uffe9\034\uffe9\035\uffe9\037\uffe9\041\uffe9\045" +
    "\uffe9\001\002\000\042\012\uffeb\013\uffeb\023\uffeb\024\uffeb" +
    "\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033" +
    "\uffeb\034\uffeb\035\uffeb\037\uffeb\041\uffeb\045\uffeb\001\002" +
    "\000\042\012\uffde\013\uffde\023\uffde\024\uffde\025\uffde\026" +
    "\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde" +
    "\035\uffde\037\uffde\041\uffde\045\uffde\001\002\000\004\037" +
    "\145\001\002\000\042\012\uffef\013\uffef\023\127\024\130" +
    "\025\126\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033" +
    "\uffef\034\uffef\035\uffef\037\uffef\041\uffef\045\uffef\001\002" +
    "\000\034\012\123\013\124\026\ufff2\027\ufff2\030\ufff2\031" +
    "\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\037\ufff2\041\ufff2" +
    "\045\ufff2\001\002\000\030\026\120\027\121\030\117\031" +
    "\116\032\ufff7\033\ufff7\034\ufff7\035\ufff7\037\ufff7\041\ufff7" +
    "\045\ufff7\001\002\000\042\012\uffe5\013\uffe5\023\uffe5\024" +
    "\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5" +
    "\033\uffe5\034\uffe5\035\uffe5\037\uffe5\041\uffe5\045\uffe5\001" +
    "\002\000\020\032\113\033\114\034\ufffa\035\ufffa\037\ufffa" +
    "\041\ufffa\045\ufffa\001\002\000\004\046\144\001\002\000" +
    "\014\034\111\035\ufffc\037\ufffc\041\ufffc\045\ufffc\001\002" +
    "\000\012\035\107\037\ufffe\041\ufffe\045\ufffe\001\002\000" +
    "\044\012\uffe0\013\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0" +
    "\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035" +
    "\uffe0\037\uffe0\040\141\041\uffe0\045\uffe0\001\002\000\030" +
    "\014\062\015\104\016\103\017\061\020\074\021\064\022" +
    "\057\026\025\027\037\036\102\040\063\001\002\000\042" +
    "\012\uffe7\013\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027" +
    "\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7" +
    "\037\uffe7\041\uffe7\045\uffe7\001\002\000\042\012\uffe8\013" +
    "\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8" +
    "\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\037\uffe8\041" +
    "\uffe8\045\uffe8\001\002\000\006\035\107\037\106\001\002" +
    "\000\042\012\uffe2\013\uffe2\023\uffe2\024\uffe2\025\uffe2\026" +
    "\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2" +
    "\035\uffe2\037\uffe2\041\uffe2\045\uffe2\001\002\000\030\014" +
    "\062\015\104\016\103\017\061\020\074\021\064\022\057" +
    "\026\025\027\037\036\102\040\063\001\002\000\014\034" +
    "\111\035\ufffd\037\ufffd\041\ufffd\045\ufffd\001\002\000\030" +
    "\014\062\015\104\016\103\017\061\020\074\021\064\022" +
    "\057\026\025\027\037\036\102\040\063\001\002\000\020" +
    "\032\113\033\114\034\ufffb\035\ufffb\037\ufffb\041\ufffb\045" +
    "\ufffb\001\002\000\030\014\062\015\104\016\103\017\061" +
    "\020\074\021\064\022\057\026\025\027\037\036\102\040" +
    "\063\001\002\000\030\014\062\015\104\016\103\017\061" +
    "\020\074\021\064\022\057\026\025\027\037\036\102\040" +
    "\063\001\002\000\030\026\120\027\121\030\117\031\116" +
    "\032\ufff8\033\ufff8\034\ufff8\035\ufff8\037\ufff8\041\ufff8\045" +
    "\ufff8\001\002\000\030\014\062\015\104\016\103\017\061" +
    "\020\074\021\064\022\057\026\025\027\037\036\102\040" +
    "\063\001\002\000\030\014\062\015\104\016\103\017\061" +
    "\020\074\021\064\022\057\026\025\027\037\036\102\040" +
    "\063\001\002\000\030\014\062\015\104\016\103\017\061" +
    "\020\074\021\064\022\057\026\025\027\037\036\102\040" +
    "\063\001\002\000\030\014\062\015\104\016\103\017\061" +
    "\020\074\021\064\022\057\026\025\027\037\036\102\040" +
    "\063\001\002\000\034\012\123\013\124\026\ufff5\027\ufff5" +
    "\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\037" +
    "\ufff5\041\ufff5\045\ufff5\001\002\000\030\014\062\015\104" +
    "\016\103\017\061\020\074\021\064\022\057\026\025\027" +
    "\037\036\102\040\063\001\002\000\030\014\062\015\104" +
    "\016\103\017\061\020\074\021\064\022\057\026\025\027" +
    "\037\036\102\040\063\001\002\000\042\012\ufff0\013\ufff0" +
    "\023\127\024\130\025\126\026\ufff0\027\ufff0\030\ufff0\031" +
    "\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\037\ufff0\041\ufff0" +
    "\045\ufff0\001\002\000\030\014\062\015\104\016\103\017" +
    "\061\020\074\021\064\022\057\026\025\027\037\036\102" +
    "\040\063\001\002\000\030\014\062\015\104\016\103\017" +
    "\061\020\074\021\064\022\057\026\025\027\037\036\102" +
    "\040\063\001\002\000\030\014\062\015\104\016\103\017" +
    "\061\020\074\021\064\022\057\026\025\027\037\036\102" +
    "\040\063\001\002\000\042\012\uffed\013\uffed\023\uffed\024" +
    "\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed" +
    "\033\uffed\034\uffed\035\uffed\037\uffed\041\uffed\045\uffed\001" +
    "\002\000\042\012\uffee\013\uffee\023\uffee\024\uffee\025\uffee" +
    "\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034" +
    "\uffee\035\uffee\037\uffee\041\uffee\045\uffee\001\002\000\042" +
    "\012\uffec\013\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027" +
    "\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec" +
    "\037\uffec\041\uffec\045\uffec\001\002\000\042\012\ufff1\013" +
    "\ufff1\023\127\024\130\025\126\026\ufff1\027\ufff1\030\ufff1" +
    "\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\037\ufff1\041" +
    "\ufff1\045\ufff1\001\002\000\034\012\123\013\124\026\ufff6" +
    "\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035" +
    "\ufff6\037\ufff6\041\ufff6\045\ufff6\001\002\000\034\012\123" +
    "\013\124\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033" +
    "\ufff4\034\ufff4\035\ufff4\037\ufff4\041\ufff4\045\ufff4\001\002" +
    "\000\034\012\123\013\124\026\ufff3\027\ufff3\030\ufff3\031" +
    "\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\037\ufff3\041\ufff3" +
    "\045\ufff3\001\002\000\030\026\120\027\121\030\117\031" +
    "\116\032\ufff9\033\ufff9\034\ufff9\035\ufff9\037\ufff9\041\ufff9" +
    "\045\ufff9\001\002\000\030\014\062\015\104\016\103\017" +
    "\061\020\074\021\064\022\057\026\025\027\037\036\102" +
    "\040\063\001\002\000\004\041\143\001\002\000\046\011" +
    "\uffd4\012\uffd4\013\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4" +
    "\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035" +
    "\uffd4\037\uffd4\041\uffd4\045\uffd4\046\uffd4\001\002\000\030" +
    "\002\uff82\003\uff82\010\uff82\013\uff82\014\uff82\026\uff82\027" +
    "\uff82\042\uff82\043\uff82\046\uff82\050\uff82\001\002\000\004" +
    "\047\146\001\002\000\024\003\uff9f\010\uff9f\013\uff9f\014" +
    "\uff9f\026\uff9f\027\uff9f\043\uff9f\046\uff9f\050\uff9f\001\002" +
    "\000\024\003\044\010\051\013\024\014\034\026\025\027" +
    "\037\043\027\046\150\050\043\001\002\000\030\002\uffb2" +
    "\003\uffb2\010\uffb2\013\uffb2\014\uffb2\026\uffb2\027\uffb2\042" +
    "\uffb2\043\uffb2\046\uffb2\050\uffb2\001\002\000\010\037\uffad" +
    "\041\uffad\045\uffad\001\002\000\006\041\153\045\154\001" +
    "\002\000\042\012\uffe1\013\uffe1\023\uffe1\024\uffe1\025\uffe1" +
    "\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034" +
    "\uffe1\035\uffe1\037\uffe1\041\uffe1\045\uffe1\001\002\000\030" +
    "\014\062\015\104\016\103\017\061\020\074\021\064\022" +
    "\057\026\025\027\037\036\102\040\063\001\002\000\010" +
    "\037\uffae\041\uffae\045\uffae\001\002\000\030\014\062\015" +
    "\104\016\103\017\061\020\074\021\064\022\057\026\025" +
    "\027\037\036\102\040\063\001\002\000\034\014\062\015" +
    "\104\016\103\017\061\020\074\021\064\022\057\026\025" +
    "\027\037\036\102\037\uffac\040\063\045\uffac\001\002\000" +
    "\006\003\044\014\161\001\002\000\054\003\uffaf\011\uffaf" +
    "\012\uffaf\013\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027" +
    "\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf" +
    "\037\uffaf\040\uffaf\041\uffaf\045\uffaf\046\uffaf\047\uffaf\001" +
    "\002\000\046\011\uffd7\012\uffd7\013\uffd7\023\uffd7\024\uffd7" +
    "\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033" +
    "\uffd7\034\uffd7\035\uffd7\037\uffd7\040\uffd7\041\uffd7\045\uffd7" +
    "\001\002\000\006\037\164\045\154\001\002\000\042\012" +
    "\uffd1\013\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\037" +
    "\uffd1\041\uffd1\045\uffd1\001\002\000\004\041\166\001\002" +
    "\000\046\011\uffd5\012\uffd5\013\uffd5\023\uffd5\024\uffd5\025" +
    "\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\034\uffd5\035\uffd5\037\uffd5\041\uffd5\045\uffd5\046\uffd5\001" +
    "\002\000\006\003\044\014\161\001\002\000\046\011\uffd6" +
    "\012\uffd6\013\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6" +
    "\037\uffd6\040\uffd6\041\uffd6\045\uffd6\001\002\000\042\012" +
    "\uffea\013\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea" +
    "\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\037" +
    "\uffea\041\uffea\045\uffea\001\002\000\030\002\uff83\003\uff83" +
    "\010\uff83\013\uff83\014\uff83\026\uff83\027\uff83\042\uff83\043" +
    "\uff83\046\uff83\050\uff83\001\002\000\030\014\062\015\104" +
    "\016\103\017\061\020\074\021\064\022\057\026\025\027" +
    "\037\036\102\040\063\001\002\000\004\045\175\001\002" +
    "\000\030\002\uffb5\003\uffb5\010\uffb5\013\uffb5\014\uffb5\026" +
    "\uffb5\027\uffb5\042\uffb5\043\uffb5\046\uffb5\050\uffb5\001\002" +
    "\000\032\003\204\014\062\015\104\016\103\017\061\020" +
    "\074\021\064\022\057\026\025\027\037\036\102\040\063" +
    "\001\002\000\034\014\062\015\104\016\103\017\061\020" +
    "\074\021\064\022\057\026\025\027\037\036\102\037\uffac" +
    "\040\063\045\uffac\001\002\000\006\037\201\045\154\001" +
    "\002\000\004\045\202\001\002\000\030\002\uffb1\003\uffb1" +
    "\010\uffb1\013\uffb1\014\uffb1\026\uffb1\027\uffb1\042\uffb1\043" +
    "\uffb1\046\uffb1\050\uffb1\001\002\000\004\045\206\001\002" +
    "\000\004\045\205\001\002\000\030\002\uff86\003\uff86\010" +
    "\uff86\013\uff86\014\uff86\026\uff86\027\uff86\042\uff86\043\uff86" +
    "\046\uff86\050\uff86\001\002\000\030\002\uffb6\003\uffb6\010" +
    "\uffb6\013\uffb6\014\uffb6\026\uffb6\027\uffb6\042\uffb6\043\uffb6" +
    "\046\uffb6\050\uffb6\001\002\000\004\045\210\001\002\000" +
    "\030\002\uffb0\003\uffb0\010\uffb0\013\uffb0\014\uffb0\026\uffb0" +
    "\027\uffb0\042\uffb0\043\uffb0\046\uffb0\050\uffb0\001\002\000" +
    "\044\011\uffd3\012\uffd3\013\uffd3\023\uffd3\024\uffd3\025\uffd3" +
    "\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\035\uffd3\037\uffd3\041\uffd3\045\uffd3\001\002\000\044" +
    "\011\uff81\012\uff81\013\uff81\023\uff81\024\uff81\025\uff81\026" +
    "\uff81\027\uff81\030\uff81\031\uff81\032\uff81\033\uff81\034\uff81" +
    "\035\uff81\037\uff81\041\uff81\045\uff81\001\002\000\004\046" +
    "\230\001\002\000\032\003\216\014\062\015\104\016\103" +
    "\017\061\020\074\021\064\022\057\026\025\027\037\036" +
    "\102\040\063\001\002\000\004\037\220\001\002\000\004" +
    "\046\217\001\002\000\030\002\uff84\003\uff84\010\uff84\013" +
    "\uff84\014\uff84\026\uff84\027\uff84\042\uff84\043\uff84\046\uff84" +
    "\050\uff84\001\002\000\004\047\221\001\002\000\024\003" +
    "\uff9f\010\uff9f\013\uff9f\014\uff9f\026\uff9f\027\uff9f\043\uff9f" +
    "\046\uff9f\050\uff9f\001\002\000\024\003\044\010\051\013" +
    "\024\014\034\026\025\027\037\043\027\046\223\050\043" +
    "\001\002\000\032\002\uffb4\003\uffb4\010\uffb4\013\uffb4\014" +
    "\uffb4\026\uffb4\027\uffb4\042\uffb4\043\uffb4\044\224\046\uffb4" +
    "\050\uffb4\001\002\000\004\047\225\001\002\000\024\003" +
    "\uff9f\010\uff9f\013\uff9f\014\uff9f\026\uff9f\027\uff9f\043\uff9f" +
    "\046\uff9f\050\uff9f\001\002\000\024\003\044\010\051\013" +
    "\024\014\034\026\025\027\037\043\027\046\227\050\043" +
    "\001\002\000\030\002\uffb3\003\uffb3\010\uffb3\013\uffb3\014" +
    "\uffb3\026\uffb3\027\uffb3\042\uffb3\043\uffb3\046\uffb3\050\uffb3" +
    "\001\002\000\030\002\uff85\003\uff85\010\uff85\013\uff85\014" +
    "\uff85\026\uff85\027\uff85\042\uff85\043\uff85\046\uff85\050\uff85" +
    "\001\002\000\044\011\uffd2\012\uffd2\013\uffd2\023\uffd2\024" +
    "\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2" +
    "\033\uffd2\034\uffd2\035\uffd2\037\uffd2\041\uffd2\045\uffd2\001" +
    "\002\000\044\011\uff80\012\uff80\013\uff80\023\uff80\024\uff80" +
    "\025\uff80\026\uff80\027\uff80\030\uff80\031\uff80\032\uff80\033" +
    "\uff80\034\uff80\035\uff80\037\uff80\041\uff80\045\uff80\001\002" +
    "\000\004\047\262\001\002\000\006\045\261\047\uff94\001" +
    "\002\000\006\003\237\014\236\001\002\000\004\047\241" +
    "\001\002\000\004\045\240\001\002\000\034\002\uff8c\003" +
    "\uff8c\005\uff8c\010\uff8c\012\uff8c\013\uff8c\014\uff8c\026\uff8c" +
    "\027\uff8c\042\uff8c\043\uff8c\046\uff8c\050\uff8c\001\002\000" +
    "\020\003\243\014\242\051\246\052\251\053\250\054\244" +
    "\055\247\001\002\000\014\011\uff97\036\uff97\037\uff97\041" +
    "\uff97\045\uff97\001\002\000\004\045\260\001\002\000\014" +
    "\011\uff99\036\uff99\037\uff99\041\uff99\045\uff99\001\002\000" +
    "\006\011\252\045\253\001\002\000\014\011\uff9c\036\uff9c" +
    "\037\uff9c\041\uff9c\045\uff9c\001\002\000\014\011\uff98\036" +
    "\uff98\037\uff98\041\uff98\045\uff98\001\002\000\014\011\uff9a" +
    "\036\uff9a\037\uff9a\041\uff9a\045\uff9a\001\002\000\014\011" +
    "\uff9b\036\uff9b\037\uff9b\041\uff9b\045\uff9b\001\002\000\032" +
    "\003\255\014\062\015\104\016\103\017\061\020\074\021" +
    "\064\022\057\026\025\027\037\036\102\040\063\001\002" +
    "\000\034\002\uffbb\003\uffbb\005\uffbb\010\uffbb\012\uffbb\013" +
    "\uffbb\014\uffbb\026\uffbb\027\uffbb\042\uffbb\043\uffbb\046\uffbb" +
    "\050\uffbb\001\002\000\004\045\257\001\002\000\004\045" +
    "\256\001\002\000\034\002\uff8a\003\uff8a\005\uff8a\010\uff8a" +
    "\012\uff8a\013\uff8a\014\uff8a\026\uff8a\027\uff8a\042\uff8a\043" +
    "\uff8a\046\uff8a\050\uff8a\001\002\000\034\002\uffba\003\uffba" +
    "\005\uffba\010\uffba\012\uffba\013\uffba\014\uffba\026\uffba\027" +
    "\uffba\042\uffba\043\uffba\046\uffba\050\uffba\001\002\000\034" +
    "\002\uff8b\003\uff8b\005\uff8b\010\uff8b\012\uff8b\013\uff8b\014" +
    "\uff8b\026\uff8b\027\uff8b\042\uff8b\043\uff8b\046\uff8b\050\uff8b" +
    "\001\002\000\034\002\uff92\003\uff92\005\uff92\010\uff92\012" +
    "\uff92\013\uff92\014\uff92\026\uff92\027\uff92\042\uff92\043\uff92" +
    "\046\uff92\050\uff92\001\002\000\022\003\264\014\242\040" +
    "\265\051\246\052\251\053\250\054\244\055\247\001\002" +
    "\000\006\011\311\045\312\001\002\000\004\045\310\001" +
    "\002\000\016\014\242\051\246\052\251\053\250\054\244" +
    "\055\247\001\002\000\010\011\267\036\270\045\271\001" +
    "\002\000\006\003\301\040\300\001\002\000\032\003\273" +
    "\014\062\015\104\016\103\017\061\020\074\021\064\022" +
    "\057\026\025\027\037\036\102\040\063\001\002\000\034" +
    "\002\uffc0\003\uffc0\005\uffc0\010\uffc0\012\uffc0\013\uffc0\014" +
    "\uffc0\026\uffc0\027\uffc0\042\uffc0\043\uffc0\046\uffc0\050\uffc0" +
    "\001\002\000\004\037\276\001\002\000\004\037\274\001" +
    "\002\000\004\045\275\001\002\000\034\002\uff8f\003\uff8f" +
    "\005\uff8f\010\uff8f\012\uff8f\013\uff8f\014\uff8f\026\uff8f\027" +
    "\uff8f\042\uff8f\043\uff8f\046\uff8f\050\uff8f\001\002\000\004" +
    "\045\277\001\002\000\034\002\uffbf\003\uffbf\005\uffbf\010" +
    "\uffbf\012\uffbf\013\uffbf\014\uffbf\026\uffbf\027\uffbf\042\uffbf" +
    "\043\uffbf\046\uffbf\050\uffbf\001\002\000\034\014\062\015" +
    "\104\016\103\017\061\020\074\021\064\022\057\026\025" +
    "\027\037\036\102\040\063\041\uffac\045\uffac\001\002\000" +
    "\004\045\302\001\002\000\034\002\uff8e\003\uff8e\005\uff8e" +
    "\010\uff8e\012\uff8e\013\uff8e\014\uff8e\026\uff8e\027\uff8e\042" +
    "\uff8e\043\uff8e\046\uff8e\050\uff8e\001\002\000\006\041\304" +
    "\045\154\001\002\000\004\045\305\001\002\000\034\002" +
    "\uffbe\003\uffbe\005\uffbe\010\uffbe\012\uffbe\013\uffbe\014\uffbe" +
    "\026\uffbe\027\uffbe\042\uffbe\043\uffbe\046\uffbe\050\uffbe\001" +
    "\002\000\004\041\307\001\002\000\012\011\uff96\036\uff96" +
    "\037\uff96\045\uff96\001\002\000\034\002\uff91\003\uff91\005" +
    "\uff91\010\uff91\012\uff91\013\uff91\014\uff91\026\uff91\027\uff91" +
    "\042\uff91\043\uff91\046\uff91\050\uff91\001\002\000\032\003" +
    "\314\014\062\015\104\016\103\017\061\020\074\021\064" +
    "\022\057\026\025\027\037\036\102\040\063\001\002\000" +
    "\034\002\uffc2\003\uffc2\005\uffc2\010\uffc2\012\uffc2\013\uffc2" +
    "\014\uffc2\026\uffc2\027\uffc2\042\uffc2\043\uffc2\046\uffc2\050" +
    "\uffc2\001\002\000\004\045\316\001\002\000\004\045\315" +
    "\001\002\000\034\002\uff90\003\uff90\005\uff90\010\uff90\012" +
    "\uff90\013\uff90\014\uff90\026\uff90\027\uff90\042\uff90\043\uff90" +
    "\046\uff90\050\uff90\001\002\000\034\002\uffc1\003\uffc1\005" +
    "\uffc1\010\uffc1\012\uffc1\013\uffc1\014\uffc1\026\uffc1\027\uffc1" +
    "\042\uffc1\043\uffc1\046\uffc1\050\uffc1\001\002\000\004\047" +
    "\322\001\002\000\006\046\321\047\uff94\001\002\000\012" +
    "\002\uff89\005\uff89\012\uff89\013\uff89\001\002\000\022\003" +
    "\325\014\242\040\265\051\246\052\251\053\250\054\244" +
    "\055\247\001\002\000\004\036\330\001\002\000\010\036" +
    "\uff9e\037\uff9e\045\uff9e\001\002\000\006\036\uff93\046\327" +
    "\001\002\000\010\036\uff9d\037\uff9d\045\uff9d\001\002\000" +
    "\012\002\uff88\005\uff88\012\uff88\013\uff88\001\002\000\012" +
    "\003\044\014\161\037\uffa3\045\uffa3\001\002\000\006\003" +
    "\347\047\346\001\002\000\006\037\uffa4\045\uffa4\001\002" +
    "\000\006\037\334\045\335\001\002\000\004\047\337\001" +
    "\002\000\006\003\044\014\161\001\002\000\006\037\uffa5" +
    "\045\uffa5\001\002\000\026\003\uff9f\010\uff9f\013\uff9f\014" +
    "\uff9f\026\uff9f\027\uff9f\042\uff9f\043\uff9f\046\uff9f\050\uff9f" +
    "\001\002\000\026\003\044\010\051\013\024\014\034\026" +
    "\025\027\037\042\342\043\027\046\341\050\043\001\002" +
    "\000\012\002\uffb8\005\uffb8\012\uffb8\013\uffb8\001\002\000" +
    "\030\014\062\015\104\016\103\017\061\020\074\021\064" +
    "\022\057\026\025\027\037\036\102\040\063\001\002\000" +
    "\004\045\344\001\002\000\004\046\345\001\002\000\012" +
    "\002\uffb9\005\uffb9\012\uffb9\013\uffb9\001\002\000\022\003" +
    "\351\014\242\040\265\051\246\052\251\053\250\054\244" +
    "\055\247\001\002\000\006\037\uff87\045\uff87\001\002\000" +
    "\006\037\uffb7\045\uffb7\001\002\000\006\037\uff93\045\uff93" +
    "\001\002\000\004\047\353\001\002\000\026\003\264\006" +
    "\354\007\355\014\242\040\265\051\246\052\251\053\250" +
    "\054\244\055\247\001\002\000\004\047\366\001\002\000" +
    "\004\047\356\001\002\000\010\003\357\013\uffa6\046\uffa6" +
    "\001\002\000\004\046\365\001\002\000\006\013\363\046" +
    "\364\001\002\000\006\013\uffa8\046\uffa8\001\002\000\006" +
    "\013\uffa7\046\uffa7\001\002\000\006\003\234\014\161\001" +
    "\002\000\012\002\uffbd\005\uffbd\012\uffbd\013\uffbd\001\002" +
    "\000\012\002\uff8d\005\uff8d\012\uff8d\013\uff8d\001\002\000" +
    "\012\003\044\014\161\045\uffa9\046\uffa9\001\002\000\006" +
    "\045\uffaa\046\uffaa\001\002\000\006\045\372\046\371\001" +
    "\002\000\012\002\uffbc\005\uffbc\012\uffbc\013\uffbc\001\002" +
    "\000\006\003\044\014\161\001\002\000\006\045\uffab\046" +
    "\uffab\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\371\000\004\002\005\001\001\000\004\044\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\023\012\025\016\026\014\027\015\030\011\031" +
    "\017\032\020\001\001\000\004\003\351\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\316\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\022\001\001\000" +
    "\040\003\044\015\045\016\047\017\031\020\037\021\025" +
    "\024\027\025\051\030\040\031\041\034\046\035\032\036" +
    "\034\037\035\040\030\001\001\000\004\003\232\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\004\206\005\077\006\076\007" +
    "\074\010\072\011\071\012\070\013\065\014\064\016\100" +
    "\017\057\020\066\021\055\022\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\004\067\005\077\006\076\007\074" +
    "\010\072\011\071\012\070\013\065\014\064\016\100\017" +
    "\057\020\066\021\055\022\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\013\170\014\064\016\100\017" +
    "\057\020\066\021\055\022\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\004\150\005" +
    "\077\006\076\007\074\010\072\011\071\012\070\013\065" +
    "\014\064\016\100\017\057\020\066\021\055\022\054\046" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\005\104\006\076" +
    "\007\074\010\072\011\071\012\070\013\065\014\064\016" +
    "\100\017\057\020\066\021\055\022\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\006\107\007\074\010\072\011\071\012\070" +
    "\013\065\014\064\016\100\017\057\020\066\021\055\022" +
    "\054\001\001\000\002\001\001\000\030\007\111\010\072" +
    "\011\071\012\070\013\065\014\064\016\100\017\057\020" +
    "\066\021\055\022\054\001\001\000\002\001\001\000\026" +
    "\010\137\011\071\012\070\013\065\014\064\016\100\017" +
    "\057\020\066\021\055\022\054\001\001\000\026\010\114" +
    "\011\071\012\070\013\065\014\064\016\100\017\057\020" +
    "\066\021\055\022\054\001\001\000\002\001\001\000\024" +
    "\011\136\012\070\013\065\014\064\016\100\017\057\020" +
    "\066\021\055\022\054\001\001\000\024\011\135\012\070" +
    "\013\065\014\064\016\100\017\057\020\066\021\055\022" +
    "\054\001\001\000\024\011\134\012\070\013\065\014\064" +
    "\016\100\017\057\020\066\021\055\022\054\001\001\000" +
    "\024\011\121\012\070\013\065\014\064\016\100\017\057" +
    "\020\066\021\055\022\054\001\001\000\002\001\001\000" +
    "\022\012\133\013\065\014\064\016\100\017\057\020\066" +
    "\021\055\022\054\001\001\000\022\012\124\013\065\014" +
    "\064\016\100\017\057\020\066\021\055\022\054\001\001" +
    "\000\002\001\001\000\020\013\132\014\064\016\100\017" +
    "\057\020\066\021\055\022\054\001\001\000\020\013\131" +
    "\014\064\016\100\017\057\020\066\021\055\022\054\001" +
    "\001\000\020\013\130\014\064\016\100\017\057\020\066" +
    "\021\055\022\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\004\141\005\077\006\076\007\074\010\072\011\071" +
    "\012\070\013\065\014\064\016\100\017\057\020\066\021" +
    "\055\022\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\146\001" +
    "\001\000\040\003\044\015\045\016\047\017\031\020\037" +
    "\021\025\024\027\025\051\030\040\031\041\034\046\035" +
    "\032\036\034\037\035\040\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\004\154\005\077\006\076\007\074\010\072\011\071" +
    "\012\070\013\065\014\064\016\100\017\057\020\066\021" +
    "\055\022\054\001\001\000\002\001\001\000\036\004\164" +
    "\005\077\006\076\007\074\010\072\011\071\012\070\013" +
    "\065\014\064\016\100\017\057\020\066\021\055\022\054" +
    "\001\001\000\040\004\150\005\077\006\076\007\074\010" +
    "\072\011\071\012\070\013\065\014\064\016\100\017\057" +
    "\020\066\021\055\022\054\046\162\001\001\000\004\003" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\004\173\005\077\006" +
    "\076\007\074\010\072\011\071\012\070\013\065\014\064" +
    "\016\100\017\057\020\066\021\055\022\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\004\202\005\077" +
    "\006\076\007\074\010\072\011\071\012\070\013\065\014" +
    "\064\016\100\017\057\020\066\021\055\022\054\001\001" +
    "\000\040\004\150\005\077\006\076\007\074\010\072\011" +
    "\071\012\070\013\065\014\064\016\100\017\057\020\066" +
    "\021\055\022\054\046\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\004\214\005\077\006\076\007" +
    "\074\010\072\011\071\012\070\013\065\014\064\016\100" +
    "\017\057\020\066\021\055\022\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\221\001\001\000\040\003\044\015\045\016" +
    "\047\017\031\020\037\021\025\024\027\025\051\030\040" +
    "\031\041\034\046\035\032\036\034\037\035\040\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\045\225" +
    "\001\001\000\040\003\044\015\045\016\047\017\031\020" +
    "\037\021\025\024\027\025\051\030\040\031\041\034\046" +
    "\035\032\036\034\037\035\040\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\244\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\004" +
    "\253\005\077\006\076\007\074\010\072\011\071\012\070" +
    "\013\065\014\064\016\100\017\057\020\066\021\055\022" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\042\262\043\265\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\305\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\004\271" +
    "\005\077\006\076\007\074\010\072\011\071\012\070\013" +
    "\065\014\064\016\100\017\057\020\066\021\055\022\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\004\150\005\077\006\076\007" +
    "\074\010\072\011\071\012\070\013\065\014\064\016\100" +
    "\017\057\020\066\021\055\022\054\046\302\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\004\312\005\077\006\076" +
    "\007\074\010\072\011\071\012\070\013\065\014\064\016" +
    "\100\017\057\020\066\021\055\022\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\041\322\042\323\043\325\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\330\033" +
    "\331\051\332\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\330\033" +
    "\335\001\001\000\002\001\001\000\004\045\337\001\001" +
    "\000\040\003\044\015\045\016\047\017\031\020\037\021" +
    "\025\024\027\025\051\030\040\031\041\034\046\035\032" +
    "\036\034\037\035\040\030\001\001\000\002\001\001\000" +
    "\036\004\342\005\077\006\076\007\074\010\072\011\071" +
    "\012\070\013\065\014\064\016\100\017\057\020\066\021" +
    "\055\022\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\041\347\042\323\043\325\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\042\262\043\265\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\357\001\001" +
    "\000\002\001\001\000\006\025\360\030\361\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\232\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\366\047" +
    "\367\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\372\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {

 
   private ASExpresiones ase = new ASExpresiones();
   private ASInstrucciones asi = new ASInstrucciones();
   private ASTipos ast = new ASTipos();

  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= OBJECTS LObjetos PROCESS LProceso 
            {
              P RESULT =null;
		TokenValue idObj = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		List<Nodo> lObjetos = (List<Nodo>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue idPro = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<Nodo> lProceso = (List<Nodo>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new P(lObjetos,idObj.getFila(),idObj.getColumna(),lProceso,idPro.getFila(),idPro.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		P start_val = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= OBJECTS LObjetos 
            {
              P RESULT =null;
		TokenValue idObj = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<Nodo> lObjetos = (List<Nodo>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new P(lObjetos,idObj.getFila(),idObj.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Exp ::= Exp0 
            {
              E RESULT =null;
		E vExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = vExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Exp0 ::= Exp0 OR Exp1 
            {
              E RESULT =null;
		E vExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E vExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ase.or(vExp1,vExp2,id.getFila(),id.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Exp0 ::= Exp1 
            {
              E RESULT =null;
		E vExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = vExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Exp1 ::= Exp1 AND Exp2 
            {
              E RESULT =null;
		E vExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E vExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ase.and(vExp1,vExp2,id.getFila(),id.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Exp1 ::= Exp2 
            {
              E RESULT =null;
		E vExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = vExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Exp2 ::= Exp2 IGUAL Exp3 
            {
              E RESULT =null;
		E vExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E vExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ase.igual(vExp1,vExp2,id.getFila(),id.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Exp2 ::= Exp2 DISTINTO Exp3 
            {
              E RESULT =null;
		E vExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E vExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ase.distinto(vExp1,vExp2,id.getFila(),id.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Exp2 ::= Exp3 
            {
              E RESULT =null;
		E vExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = vExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Exp3 ::= Exp3 MENOR Exp4 
            {
              E RESULT =null;
		E vExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E vExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ase.menor(vExp1,vExp2,id.getFila(),id.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Exp3 ::= Exp3 MAYOR Exp4 
            {
              E RESULT =null;
		E vExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E vExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ase.mayor(vExp1,vExp2,id.getFila(),id.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Exp3 ::= Exp3 MENORIGUAL Exp4 
            {
              E RESULT =null;
		E vExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E vExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ase.menorigual(vExp1,vExp2,id.getFila(),id.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Exp3 ::= Exp3 MAYORIGUAL Exp4 
            {
              E RESULT =null;
		E vExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E vExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ase.mayorigual(vExp1,vExp2,id.getFila(),id.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Exp3 ::= Exp4 
            {
              E RESULT =null;
		E vExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = vExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Exp4 ::= Exp4 MAS Exp5 
            {
              E RESULT =null;
		E vExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E vExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ase.suma(vExp1,vExp2,id.getFila(),id.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Exp4 ::= Exp4 MENOS Exp5 
            {
              E RESULT =null;
		E vExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E vExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ase.resta(vExp1,vExp2,id.getFila(),id.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Exp4 ::= Exp5 
            {
              E RESULT =null;
		E vExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = vExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Exp5 ::= Exp5 MULT Exp6 
            {
              E RESULT =null;
		E vExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E vExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ase.multiplicacion(vExp1,vExp2,id.getFila(),id.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Exp5 ::= Exp5 DIV Exp6 
            {
              E RESULT =null;
		E vExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E vExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ase.division(vExp1,vExp2,id.getFila(),id.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Exp5 ::= Exp5 MOD Exp6 
            {
              E RESULT =null;
		E vExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E vExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ase.modulo(vExp1,vExp2,id.getFila(),id.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Exp5 ::= Exp6 
            {
              E RESULT =null;
		E vExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = vExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Exp6 ::= NOT Exp6 
            {
              E RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E vExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ase.not(vExp,id.getFila(),id.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Exp6 ::= Exp7 
            {
              E RESULT =null;
		E vExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = vExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Exp7 ::= ENT 
            {
              E RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ase.entero(id.getLexema(),id.getFila(),id.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Exp7 ::= REAL 
            {
              E RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ase.real(id.getLexema(),id.getFila(),id.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp7 ::= TRUE 
            {
              E RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ase.bool(id.getLexema(),id.getFila(),id.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Exp7 ::= FALSE 
            {
              E RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ase.bool(id.getLexema(),id.getFila(),id.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp7 ::= CAR 
            {
              E RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ase.caracter(id.getLexema(),id.getFila(),id.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp7 ::= ID 
            {
              E RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ase.id(id.getLexema(),id.getFila(),id.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp7 ::= PA Exp0 PC 
            {
              E RESULT =null;
		E vExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = vExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp7 ::= CA LExp CC 
            {
              E RESULT =null;
		TokenValue tv = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		List<Nodo> lExp = (List<Nodo>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = ase.array(lExp,tv.getFila(),tv.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp7 ::= ACustom 
            {
              E RESULT =null;
		E vACustom = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = vACustom; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp7 ::= AVector 
            {
              E RESULT =null;
		E vAVector = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = vAVector; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp7 ::= APuntero 
            {
              E RESULT =null;
		E vAPuntero = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = vAPuntero; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp7 ::= ADireccion 
            {
              E RESULT =null;
		E vADireccion = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = vADireccion; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp7 ::= ALlamada 
            {
              E RESULT =null;
		E vALlamada = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = vALlamada; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Acceso ::= ACustom 
            {
              E RESULT =null;
		E vACustom = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = vACustom; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Acceso",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Acceso ::= AVector 
            {
              E RESULT =null;
		E vAVector = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = vAVector; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Acceso",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Acceso ::= APuntero 
            {
              E RESULT =null;
		E vAPuntero = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = vAPuntero; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Acceso",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Acceso ::= ADireccion 
            {
              E RESULT =null;
		E vADireccion = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = vADireccion; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Acceso",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ACustom ::= ID P Id 
            {
              E RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue tv = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Id atributo = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ase.aCustom(id.getLexema(),atributo,tv.getFila(),tv.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACustom",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ACustom ::= AVector P Id 
            {
              E RESULT =null;
		E aVector = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue tv = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Id atributo = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ase.aCustom(aVector,atributo,tv.getFila(),tv.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACustom",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // AVector ::= ID CA Exp CC 
            {
              E RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E vExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = ase.aVector(id.getLexema(),vExp,id.getFila(),id.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("AVector",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // AVector ::= ACustom CA Exp CC 
            {
              E RESULT =null;
		E aCustom = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		TokenValue tv = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E vExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = ase.aVector(aCustom,vExp,tv.getFila(),tv.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("AVector",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // APuntero ::= MAYOR ID 
            {
              E RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ase.aPuntero(id.getLexema(),id.getFila(),id.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("APuntero",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ADireccion ::= MENOR ID 
            {
              E RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ase.aDireccion(id.getLexema(),id.getFila(),id.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ADireccion",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ALlamada ::= ID PA LExp PC 
            {
              E RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		List<Nodo> lExp = (List<Nodo>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = ase.aLlamada(id.getLexema(),lExp,id.getFila(),id.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ALlamada",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // InstruccionObjetos ::= DVariable 
            {
              I RESULT =null;
		I vDVariable = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = vDVariable; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InstruccionObjetos",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // InstruccionObjetos ::= DStruct 
            {
              I RESULT =null;
		I vDStruct = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = vDStruct; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InstruccionObjetos",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // InstruccionObjetos ::= DEnum 
            {
              I RESULT =null;
		I vDEnum = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = vDEnum; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InstruccionObjetos",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // InstruccionObjetos ::= DVector 
            {
              I RESULT =null;
		I vDVector = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = vDVector; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InstruccionObjetos",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // InstruccionObjetos ::= DFuncion 
            {
              I RESULT =null;
		I vDFuncion = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = vDFuncion; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InstruccionObjetos",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // InstruccionObjetos ::= DPuntero 
            {
              I RESULT =null;
		I vDPuntero = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = vDPuntero; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InstruccionObjetos",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // InstruccionProceso ::= DVariable 
            {
              I RESULT =null;
		I vDVariable = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = vDVariable; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InstruccionProceso",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // InstruccionProceso ::= DVector 
            {
              I RESULT =null;
		I vDVector = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = vDVector; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InstruccionProceso",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // InstruccionProceso ::= DPuntero 
            {
              I RESULT =null;
		I vDPuntero = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = vDPuntero; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InstruccionProceso",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // InstruccionProceso ::= Llamada 
            {
              I RESULT =null;
		I vLlamada = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = vLlamada; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InstruccionProceso",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // InstruccionProceso ::= Asignacion 
            {
              I RESULT =null;
		I vAsignacion = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = vAsignacion; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InstruccionProceso",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // InstruccionProceso ::= Condicion 
            {
              I RESULT =null;
		I vCondicion = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = vCondicion; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InstruccionProceso",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // InstruccionProceso ::= Bucle 
            {
              I RESULT =null;
		I vBucle = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = vBucle; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InstruccionProceso",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // InstruccionProceso ::= Imprimir 
            {
              I RESULT =null;
		I vImprimir = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = vImprimir; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InstruccionProceso",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DVariable ::= MENOS Id DP TipoBasico C 
            {
              I RESULT =null;
		TokenValue tv = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = asi.dVariable(id,tipo,tv.getFila(),tv.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DVariable",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DVariable ::= MENOS Id DP TipoBasico ASIGN Exp C 
            {
              I RESULT =null;
		TokenValue tv = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E vExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = asi.dVariable(id,tipo,vExp,tv.getFila(),tv.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DVariable",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DVector ::= MENOS Id DP TipoComplejo C 
            {
              I RESULT =null;
		TokenValue tv = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = asi.dVector(id,tipo,tv.getFila(),tv.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DVector",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DVector ::= MENOS Id DP TipoComplejo PA Exp PC C 
            {
              I RESULT =null;
		TokenValue tv = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		E vExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = asi.dVector(id,tipo,vExp,tv.getFila(),tv.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DVector",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DVector ::= MENOS Id DP TipoComplejo ASIGN CA LExp CC C 
            {
              I RESULT =null;
		TokenValue tv = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		List<Nodo> lExp = (List<Nodo>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = asi.dVector(id,tipo,lExp,tv.getFila(),tv.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DVector",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DStruct ::= MENOS Id DP STRUCT DP LAtributos P 
            {
              I RESULT =null;
		TokenValue tv = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		List<Nodo> lAtributos = (List<Nodo>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = asi.dStruct(id,lAtributos,tv.getFila(),tv.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DStruct",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DEnum ::= MENOS Id DP ENUM DP LId P 
            {
              I RESULT =null;
		TokenValue tv = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		List<Nodo> lConstantes = (List<Nodo>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = asi.dEnum(id,lConstantes,tv.getFila(),tv.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEnum",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DPuntero ::= MENOS MAYOR ID DP TipoBasico C 
            {
              I RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = asi.dPuntero(new Id(id.getLexema(),id.getFila(),id.getColumna()),tipo,id.getFila(),id.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DPuntero",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DPuntero ::= MENOS MAYOR ID DP TipoBasico ASIGN Exp C 
            {
              I RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E vExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = asi.dPuntero(new Id(id.getLexema(),id.getFila(),id.getColumna()),tipo,vExp,id.getFila(),id.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DPuntero",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DFuncion ::= MAS Id DP Tipo PA LParametros PC DP LProceso LC Exp C P 
            {
              I RESULT =null;
		TokenValue tv = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-12)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-11)).value;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-9)).value;
		List<Nodo> lParametros = (List<Nodo>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		List<Nodo> lProceso = (List<Nodo>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		E vExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = asi.dFuncion(id,tipo,lParametros,lProceso,vExp,tv.getFila(),tv.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DFuncion",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DFuncion ::= MAS Id DP Tipo PA LParametros PC DP LProceso P 
            {
              I RESULT =null;
		TokenValue tv = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-9)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		List<Nodo> lParametros = (List<Nodo>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<Nodo> lProceso = (List<Nodo>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = asi.dFuncion(id,tipo,lParametros,lProceso,tv.getFila(),tv.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DFuncion",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DParametro ::= Id DP Tipo 
            {
              I RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue tv = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = asi.dParametro(id,tipo,tv.getFila(),tv.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DParametro",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Asignacion ::= Id ASIGN Exp C 
            {
              I RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		TokenValue tv = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E vExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = asi.asignacion(id,vExp,tv.getFila(),tv.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Asignacion",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Asignacion ::= Acceso ASIGN Exp C 
            {
              I RESULT =null;
		E acceso = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		TokenValue tv = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E vExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = asi.asignacion(acceso,vExp,tv.getFila(),tv.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Asignacion",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Condicion ::= INTC PA Exp PC DP LProceso P 
            {
              I RESULT =null;
		TokenValue tv = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		E vExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<Nodo> lProceso = (List<Nodo>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = asi.condBasica(vExp,lProceso,tv.getFila(),tv.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Condicion",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Condicion ::= INTC PA Exp PC DP LProceso P EXCC DP LProceso P 
            {
              I RESULT =null;
		TokenValue tv = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-10)).value;
		E vExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		List<Nodo> lProceso1 = (List<Nodo>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		List<Nodo> lProceso2 = (List<Nodo>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = asi.condCompleja(vExp,lProceso1,lProceso2,tv.getFila(),tv.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Condicion",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Bucle ::= BUCLE PA Exp PC DP LProceso P 
            {
              I RESULT =null;
		TokenValue tv = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		E vExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<Nodo> lProceso = (List<Nodo>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = asi.bucle(vExp,lProceso,tv.getFila(),tv.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Bucle",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Llamada ::= Id PA LExp PC C 
            {
              I RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<Nodo> lArgumentos = (List<Nodo>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue tv = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = asi.llamada(id,lArgumentos,tv.getFila(),0); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Llamada",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Imprimir ::= PRINT Exp C 
            {
              I RESULT =null;
		TokenValue tv = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E vExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = asi.imprimir(vExp,tv.getFila(),tv.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Imprimir",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Id ::= ID 
            {
              Id RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Id(id.getLexema(),id.getFila(),id.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Id",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LExp ::= LExp C Exp 
            {
              List<Nodo> RESULT =null;
		List<Nodo> lista = (List<Nodo>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E vExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 lista.add(vExp); RESULT = lista; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LExp",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LExp ::= Exp 
            {
              List<Nodo> RESULT =null;
		E vExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 List<Nodo> lista = new ArrayList<Nodo>(); lista.add(vExp); RESULT = lista; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LExp",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LExp ::= 
            {
              List<Nodo> RESULT =null;
		 RESULT = new ArrayList<Nodo>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LExp",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LId ::= LId C Id 
            {
              List<Nodo> RESULT =null;
		List<Nodo> lista = (List<Nodo>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 lista.add(id); RESULT = lista; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LId",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LId ::= Id 
            {
              List<Nodo> RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 List<Nodo> lista = new ArrayList<Nodo>(); lista.add(id); RESULT = lista; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LId",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LId ::= 
            {
              List<Nodo> RESULT =null;
		 RESULT = new ArrayList<Nodo>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LId",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LAtributos ::= LAtributos DVariable 
            {
              List<Nodo> RESULT =null;
		List<Nodo> lista = (List<Nodo>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		I vDVariable = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 lista.add(vDVariable); RESULT = lista; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LAtributos",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LAtributos ::= LAtributos DVector 
            {
              List<Nodo> RESULT =null;
		List<Nodo> lista = (List<Nodo>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		I vDVector = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 lista.add(vDVector); RESULT = lista; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LAtributos",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LAtributos ::= 
            {
              List<Nodo> RESULT =null;
		 RESULT = new ArrayList<Nodo>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LAtributos",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LParametros ::= LParametros C DParametro 
            {
              List<Nodo> RESULT =null;
		List<Nodo> lista = (List<Nodo>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		I vDParametro = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 lista.add(vDParametro); RESULT = lista; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LParametros",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LParametros ::= DParametro 
            {
              List<Nodo> RESULT =null;
		I vDParametro = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 List<Nodo> lista = new ArrayList<Nodo>(); lista.add(vDParametro); RESULT = lista; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LParametros",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LParametros ::= 
            {
              List<Nodo> RESULT =null;
		 RESULT = new ArrayList<Nodo>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LParametros",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LObjetos ::= LObjetos InstruccionObjetos 
            {
              List<Nodo> RESULT =null;
		List<Nodo> lista = (List<Nodo>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		I instruccion = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 lista.add(instruccion); RESULT = lista; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LObjetos",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LObjetos ::= 
            {
              List<Nodo> RESULT =null;
		 RESULT = new ArrayList<Nodo>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LObjetos",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LProceso ::= LProceso InstruccionProceso 
            {
              List<Nodo> RESULT =null;
		List<Nodo> lista = (List<Nodo>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		I instruccion = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 lista.add(instruccion); RESULT = lista; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LProceso",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LProceso ::= 
            {
              List<Nodo> RESULT =null;
		 RESULT = new ArrayList<Nodo>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LProceso",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Tipo ::= TipoBasico 
            {
              T RESULT =null;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = tipo; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Tipo ::= TipoComplejo 
            {
              T RESULT =null;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = tipo; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // TipoBasico ::= VOID 
            {
              T RESULT =null;
		 RESULT = ast.tVoid(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoBasico",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TipoBasico ::= INT 
            {
              T RESULT =null;
		 RESULT = ast.tInt(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoBasico",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // TipoBasico ::= FLOAT 
            {
              T RESULT =null;
		 RESULT = ast.tFloat(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoBasico",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TipoBasico ::= BOOL 
            {
              T RESULT =null;
		 RESULT = ast.tBool(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoBasico",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TipoBasico ::= CHAR 
            {
              T RESULT =null;
		 RESULT = ast.tChar(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoBasico",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TipoBasico ::= ID 
            {
              T RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ast.tCustom(id.getLexema()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoBasico",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TipoComplejo ::= CA TipoBasico CC 
            {
              T RESULT =null;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = ast.tVector(tipo); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoComplejo",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Programa ::= error 
            {
              P RESULT =null;
		 System.out.println("Falta la zona de objetos"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Id ::= error 
            {
              Id RESULT =null;
		 System.out.println("Identificador no valido"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Id",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Tipo ::= error 
            {
              T RESULT =null;
		 System.out.println("Tipo no valido"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DVariable ::= MENOS error C 
            {
              I RESULT =null;
		TokenValue tv = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 System.out.println("Error en la estructura de la declaracion"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DVariable",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DVariable ::= MENOS Id DP error C 
            {
              I RESULT =null;
		TokenValue tv = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		 System.out.println("Error en el tipo de la declaracion"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DVariable",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DVariable ::= MENOS Id DP TipoBasico ASIGN error C 
            {
              I RESULT =null;
		TokenValue tv = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		 System.out.println("Error en el valor inicial de la variable"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DVariable",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DVector ::= MENOS Id DP TipoComplejo PA error PC C 
            {
              I RESULT =null;
		TokenValue tv = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		 System.out.println("Error en la longitud del vector"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DVector",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DVector ::= MENOS Id DP TipoComplejo ASIGN error C 
            {
              I RESULT =null;
		TokenValue tv = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		 System.out.println("Error en el valor inicial del vector"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DVector",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DStruct ::= MENOS Id DP STRUCT DP error P 
            {
              I RESULT =null;
		TokenValue tv = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		 System.out.println("Error en las declaraciones del struct"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DStruct",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // DPuntero ::= MENOS MAYOR error C 
            {
              I RESULT =null;
		 System.out.println("Error en la estructura de la declaracion del puntero"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DPuntero",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // DPuntero ::= MENOS MAYOR ID DP error C 
            {
              I RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		 System.out.println("Error en el tipo de la declaracion del puntero"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DPuntero",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // DPuntero ::= MENOS MAYOR ID DP TipoBasico ASIGN error C 
            {
              I RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		 System.out.println("Error en el valor inicial del puntero"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DPuntero",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // DFuncion ::= MAS error P 
            {
              I RESULT =null;
		TokenValue tv = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 System.out.println("Error en la estructura de la funcion"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DFuncion",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // DFuncion ::= MAS Id DP error P 
            {
              I RESULT =null;
		TokenValue tv = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		 System.out.println("Error en el tipo de la funcion"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DFuncion",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // DParametro ::= Id error 
            {
              I RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 System.out.println("Error en el el parametro de la funcion por no tener tipo"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DParametro",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Asignacion ::= Id ASIGN error C 
            {
              I RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		TokenValue tv = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 System.out.println("Error en la expresion de asignacion"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Asignacion",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Condicion ::= INTC error P 
            {
              I RESULT =null;
		TokenValue tv = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 System.out.println("Error en la estructura condicional"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Condicion",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Condicion ::= INTC PA error P 
            {
              I RESULT =null;
		TokenValue tv = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		 System.out.println("Error en la condicion del condicional"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Condicion",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Bucle ::= BUCLE error P 
            {
              I RESULT =null;
		TokenValue tv = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 System.out.println("Error en la estructura del bucle"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Bucle",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Bucle ::= BUCLE PA error P 
            {
              I RESULT =null;
		TokenValue tv = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		 System.out.println("Error en la condicion del bucle"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Bucle",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // APuntero ::= MAYOR error 
            {
              E RESULT =null;
		 System.out.println("Error en el identificador del puntero"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("APuntero",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ADireccion ::= MENOR error 
            {
              E RESULT =null;
		 System.out.println("Error en el identificador de la direccion"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ADireccion",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

